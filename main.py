import logging

from aiogram import Bot, Dispatcher, executor, types

from pyowm import OWM  # API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≥–æ–¥–æ–π
from newsapi import NewsApiClient  # API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏

import time
from datetime import datetime, timedelta
from dateutil.parser import parse

from data import db  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from settings import keys  # –ú–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¢–æ–∫–µ–Ω—ã –æ—Ç API
from settings import template_messages  # –ú–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –±–æ–ª—å—à–∏–µ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)

owm = OWM(keys.OWM_TOKEN, language='ru')
news_api = NewsApiClient(api_key=keys.NEWS_TOKEN)

bot = Bot(token=keys.BOT_TOKEN)
dp = Dispatcher(bot)


def get_weather(city):
    """–†–∞–±–æ—Ç–∞–µ—Ç —Å pyowm API, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≥–æ–¥–æ–π"""
    observation = owm.weather_at_place(city)
    w = observation.get_weather()
    detailed_status = w.get_detailed_status()
    temp = str(w.get_temperature("celsius")["temp"])
    humidity = str(w.get_humidity())
    wind = str(w.get_wind()["speed"])

    if detailed_status in template_messages.weather_emoji:
        message = f'–í –≥–æ—Ä–æ–¥–µ <b>{city}</b> —Å–µ–π—á–∞—Å <b>{detailed_status}</b>' \
                   f'{template_messages.weather_emoji[detailed_status]}'
    else:
        message = f'–í –≥–æ—Ä–æ–¥–µ <b>{city}</b> —Å–µ–π—á–∞—Å <b>{detailed_status}</b>'

    message += f'\n\n' \
               f'üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp} –≥—Ä–∞–¥—É—Å(–æ–≤)</b>\n' \
               f'üí®–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>{wind} –º/—Å</b>\n' \
               f'üí¶–í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>'

    return message


def get_news(news_topic, quantity_news, news_number):
    """–†–∞–±–æ—Ç–∞–µ—Ç —Å news API, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ—Å—Ç—å—é"""
    today = datetime.today()
    today = today.strftime("%Y-%m-%d")

    all_articles = news_api.get_everything(q=news_topic,
                                           from_param=today,
                                           to=today,
                                           sort_by='relevancy')

    max_news = 5
    if len(all_articles["articles"]) < max_news:
        yesterday = datetime.now() - timedelta(days=1)
        yesterday = yesterday.strftime("%Y-%m-%d")

        all_articles = news_api.get_everything(q=news_topic,
                                               from_param=yesterday,
                                               to=today,
                                               sort_by='relevancy')

    try:
        message = f'<b>–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' \
                  f'{parse(all_articles["articles"][news_number]["publishedAt"]).strftime("%d.%m.%Y")}</b>\n' \
                  f'‚úî{all_articles["articles"][news_number]["url"]}'

    except IndexError:
        if news_number > 0:
            message = f'üßê–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ <b>"{news_topic}"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ' \
                      f'—Ç–æ–ª—å–∫–æ <b>{news_number+1}</b> –Ω–æ–≤–æ—Å—Ç–∏(–µ–π) –∏–∑ <b>{quantity_news}</b>üôÅ.\n' \
                      f'–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ, –ª–∏–±–æ ' \
                      f'–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n<b>/set_news_topic</b>, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ ' \
                      f'—Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏üòâ'
        else:
            message = f'üßê–ù–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–µ–º–µ <b>"{news_topic}"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ' \
                      f'–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á—É—Ç—å –ø–æ–∑–∂–µ, –ª–∏–±–æ –≤–≤–µ—Å—Ç–∏ ' \
                      f'–∫–æ–º–∞–Ω–¥—É \n<b>/set_news_topic</b>, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ ' \
                      f'—Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏üòâ'

    return message


def change_time(user_id, new_time):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–æ—Å–Ω–æ–≤–Ω–∞—è - set_time), –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ -> –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏–Ω–∞—á–µ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        section = 'send_time'
        old_time = db.get_user_parameter(user_id, section)

        message = f'–í—Ä–µ–º—è <b>{old_time}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!üòÉ\n'
        new_time = parse(new_time).strftime("%H:%M")

        parameter = new_time
        db.change_user_parameter(user_id, section, parameter)

        message += f'–í—Ä–µ–º—è <b>{new_time}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!üòÉ'

    except Exception as error:
        print(error)
        message = template_messages.not_correct_param

    return message


def change_city(user_id, new_city):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–æ—Å–Ω–æ–≤–Ω–∞—è - set_city), –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ -> –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏–Ω–∞—á–µ - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        new_city = new_city.capitalize()

        owm.weather_at_place(new_city)

        section = 'city'
        old_city = db.get_user_parameter(user_id, section)

        message = f'–ì–æ—Ä–æ–¥ <b>{old_city}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!üòÉ\n'

        parameter = new_city
        db.change_user_parameter(user_id, section, parameter)

        message += f'–ì–æ—Ä–æ–¥ <b>{new_city}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!üòÉ'

    except Exception as error:
        print(error)
        message = template_messages.not_correct_param

    return message


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç 'reply' –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    await message.reply('<b>ü§ù–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {0.first_name}ü§ù!</b>'.format(message.from_user), parse_mode='html')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item1 = types.KeyboardButton('üå§–ü–æ–≥–æ–¥–∞')
    item2 = types.KeyboardButton('üßê–ù–æ–≤–æ—Å—Ç–∏')

    markup.add(item1, item2)

    await message.answer(template_messages.welcome_message, parse_mode='html', reply_markup=markup)


@dp.message_handler(commands=['help'])
async def show_information(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    await message.answer(template_messages.information_message, parse_mode='html')


@dp.message_handler(regexp='üå§–ü–æ–≥–æ–¥–∞')
async def send_weather(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    section = 'progress'
    parameter = 'b_weather'
    db.change_user_parameter(user_id, section, parameter)

    section = 'city'
    city = db.get_user_parameter(user_id, section)

    try:
        weather = get_weather(city)
        await message.answer(weather, parse_mode='html')

    except Exception as error:
        print(error)
        await message.answer('ü§î–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b> –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                             '–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', parse_mode='html')


@dp.message_handler(regexp='üßê–ù–æ–≤–æ—Å—Ç–∏')
async def send_news(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    section = 'progress'
    parameter = 'b_news'
    db.change_user_parameter(user_id, section, parameter)

    section = 'news_topic'
    news_topic = db.get_user_parameter(user_id, section)

    section = 'quantity_news'
    quantity_news = db.get_user_parameter(user_id, section)

    news_number = 0

    while news_number < quantity_news:
        news = get_news(news_topic, quantity_news, news_number)

        await message.answer(news, parse_mode='html')

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ "/set_news_topic" –≤ news - –∑–Ω–∞—á–∏—Ç, –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ -> –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
        if '/set_news_topic' in news:
            break

        time.sleep(1)
        news_number += 1


@dp.message_handler(commands='set_time')
async def set_time(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    section = 'progress'
    parameter = 'set_time'
    db.change_user_parameter(user_id, section, parameter)

    if message.text == '/set_time':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ø–æ –ú–°–ö), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å '
                             '–Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã. –§–æ—Ä–º–∞—Ç: <b>–ß–ß:–ú–ú</b>. –ü—Ä–∏–º–µ—Ä—ã: '
                             '<b>08:20</b>, <b>22:05</b>', parse_mode='html')

    else:
        new_time = message.text
        message_to_user = change_time(user_id, new_time)

        await message.answer(message_to_user, parse_mode='html')


@dp.message_handler(commands='set_city')
async def set_city(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    section = 'progress'
    parameter = 'set_city'
    db.change_user_parameter(user_id, section, parameter)

    if message.text == '/set_city':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã. –ü—Ä–∏–º–µ—Ä—ã: '
                             '<b>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</b>, <b>–ö–∏–µ–≤</b>, <b>–ë—Ä—è–Ω—Å–∫</b>', parse_mode='html')

    else:
        new_city = message.text
        message_to_user = change_city(user_id, new_city)

        await message.answer(message_to_user, parse_mode='html')


@dp.message_handler()
async def echo_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã,
    –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"""
    user_id = message.from_user.id
    user_name = str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)

    db.add_new_user(user_id, user_name)

    section = 'progress'
    command = db.get_user_parameter(user_id, section)

    try:
        await globals()[command](message)

    except Exception as error:
        print(error)
        await message.answer(template_messages.not_correct_message, parse_mode='html')


if __name__ == '__main__':
    executor.start_polling(dp)
