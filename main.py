import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import quote_html
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from pyowm.exceptions import api_response_error  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ PYOWM API

import asyncio

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from data import db  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

from states.params import Params

from settings import config  # –ú–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¢–æ–∫–µ–Ω—ã –æ—Ç API, "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è" –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
from settings import template_messages  # –ú–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –±–æ–ª—å—à–∏–µ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
# –ú–æ–¥—É–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ —Å–º–µ–Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω, –∑–∞–Ω–æ—Å–∏—Ç—Å—è –≤ –ë–î
from settings.changer_params import change_time, change_city, change_news_topic, change_status

from api.api import get_news, get_weather  # –ú–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å API –ø–æ–≥–æ–¥—ã, –Ω–æ–≤–æ—Å—Ç–µ–π


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º apscheduler (–Ω—É–∂–µ–Ω –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–≥–æ–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π)
scheduler = AsyncIOScheduler()
scheduler.start()


@dp.message_handler(commands='start')
@dp.throttled(rate=3)
async def send_welcome(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç 'reply' –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.reply(f'<b>ü§ù–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {quote_html(message.from_user.first_name)}ü§ù!</b>')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item1 = types.KeyboardButton('üßê–ù–æ–≤–æ—Å—Ç–∏')
    item2 = types.KeyboardButton('üå§–ü–æ–≥–æ–¥–∞')
    markup.add(item1, item2)
    await message.answer(template_messages.welcome_message, reply_markup=markup)


@dp.message_handler(commands='help')
@dp.throttled(rate=3)
async def show_information(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.answer(template_messages.information_message)


@dp.message_handler(text='üå§–ü–æ–≥–æ–¥–∞')
@dp.throttled(rate=3)
async def send_weather(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    section = 'city'
    city = db.get_user_parameter(user_id, section)
    try:
        weather = get_weather(city)
        await message.answer(weather)

    except api_response_error.NotFoundError:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, <b>–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b> –≤–æ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, '
                             '–ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—Éü§î')


@dp.message_handler(text='üßê–ù–æ–≤–æ—Å—Ç–∏')
@dp.throttled(rate=3)
async def send_news(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    section = 'news_topic'
    news_topic = db.get_user_parameter(user_id, section)

    section = 'quantity_news'
    quantity_news = db.get_user_parameter(user_id, section)

    news_number = 0

    while news_number < quantity_news:
        news = get_news(news_topic, quantity_news, news_number)
        await message.answer(news)

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ "/set_news_topic" –≤ news - –∑–Ω–∞—á–∏—Ç, –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ
        # –Ω–∞–π–¥–µ–Ω–æ -> –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
        if '/set_news_topic' in news:
            break
        await asyncio.sleep(1)
        news_number += 1


@dp.message_handler(commands='set_time')
@dp.throttled(rate=3)
async def set_time(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.answer('–í–≤–µ–¥–∏ –≤—Ä–µ–º—è <b>(–ø–æ –ú–°–ö)</b>, –≤ –∫–æ—Ç–æ—Ä–æ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å '
                         '–Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã. –§–æ—Ä–º–∞—Ç: <b>–ß–ß:–ú–ú</b>. –ü—Ä–∏–º–µ—Ä—ã: '
                         '<b>08:20</b>, <b>22:05</b>')

    await Params.SetTime.set()


@dp.message_handler(state=Params.SetTime)
async def setting_time_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    new_time = message.text

    message_to_user = change_time(user_id, new_time)
    await message.answer(message_to_user)

    await state.finish()


@dp.message_handler(commands='set_city')
@dp.throttled(rate=3)
async def set_city(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.answer('–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã.\n–ü—Ä–∏–º–µ—Ä—ã: '
                         '<b>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</b>, <b>–ö–∏–µ–≤</b>, <b>–ë—Ä—è–Ω—Å–∫</b>')

    await Params.SetCity.set()


@dp.message_handler(state=Params.SetCity)
async def setting_city_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    new_city = message.text
    message_to_user = change_city(user_id, new_city)
    await message.answer(message_to_user)

    await state.finish()


@dp.message_handler(commands='set_news_topic')
@dp.throttled(rate=3)
async def set_news_topic(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–±–∏—Ä–∞—é—Ç—Å—è –Ω–æ–≤–æ—Å—Ç–∏"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ñ—Ä–∞–∑—É), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É(–æ–π) —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.\n'
                         '–ü—Ä–∏–º–µ—Ä—ã: <b>Apple</b>, <b>–ë–∏–∑–Ω–µ—Å</b>, <b>–ü–∞–≤–µ–ª –î—É—Ä–æ–≤</b>\n\n'
                         '<b>P.S.</b> <i>–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –≤–≤–µ–¥–∏ '
                         '–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (—Ñ—Ä–∞–∑—É) –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ</i>')

    await Params.SetNewsTopic.set()


@dp.message_handler(state=Params.SetNewsTopic)
async def setting_news_topic_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    new_news_topic = message.text
    message_to_user = change_news_topic(user_id, new_news_topic)
    await message.answer(message_to_user)

    await state.finish()


@dp.message_handler(commands='reset')
@dp.throttled(rate=3)
async def reset_settings(message: types.Message):
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    time_registered = db.get_user_parameter(user_id, 'time_registered')

    db.delete_user_info(user_id)
    await message.answer('‚úî<i>–°—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</i>\n'
                         '‚úî<i>–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!</i>\n\n'
                         '<b>–¢–µ–ø–µ—Ä—å, —Ç—ã –±—É–¥–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "–†–æ—Å—Å–∏—è" '
                         '–∏ –ø–æ–≥–æ–¥—É –∏–∑ –ú–æ—Å–∫–≤—ã –≤ 08:00 –ø–æ –ú–°–ö</b>')

    db.add_new_user(user_id, user_name)
    db.change_user_parameter(user_id, 'time_registered', time_registered)


@dp.message_handler(commands='set_status')
@dp.throttled(rate=3)
async def set_status(message: types.Message):
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    message_to_user = change_status(user_id)
    await message.answer(message_to_user)


@dp.message_handler(commands='set_quantity_news')
@dp.throttled(rate=3)
async def set_quantity_news_buttons(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="1", callback_data='news_1'),
                types.InlineKeyboardButton(text="2", callback_data='news_2'),
                types.InlineKeyboardButton(text="3", callback_data='news_3'),
            ],
            [
                types.InlineKeyboardButton(text="4", callback_data='news_4'),
                types.InlineKeyboardButton(text="5", callback_data='news_5'),
            ],
            [
                types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='news_cancel'),
            ]
        ]
    )

    await message.answer('–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, '
                         '–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–û—Ç–º–µ–Ω–∞</b>', reply_markup=markup)


@dp.callback_query_handler(text_contains='news_')
async def change_quantity_news(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_name = str(call.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await call.answer(cache_time=10)

    callback_data = str(call.data).replace('news_', '')

    if callback_data.isdigit():
        section = 'quantity_news'
        old_quantity_news = db.get_user_parameter(user_id, section)
        message_to_user = f'‚úî–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π <b>{old_quantity_news}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n'

        parameter = callback_data
        db.change_user_parameter(user_id, section, parameter)

        message_to_user += f'‚úî–¢–µ–ø–µ—Ä—å, —Ç—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>{callback_data}</b> –∑–∞ —Ä–∞–∑!'
        await call.message.answer(message_to_user)

    else:
        await call.message.answer(f'<b>–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>, —Å–∫—Ä—ã–≤–∞—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ÉüòÉ')

    await call.message.edit_reply_markup(reply_markup=None)


@dp.message_handler(commands='donate')
@dp.throttled(rate=3)
async def donate_buttons(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç –∫–Ω–æ–ø–∫–∏"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    markup = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="QIWI", url='qiwi.com/n/ANDRUS', callback_data='donate_QIWI')],
            [types.InlineKeyboardButton(text="–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–°–±–µ—Ä–±–∞–Ω–∫)", callback_data='donate_Sberbank')],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data='donate_cancel')]
        ]
    )

    await message.answer('–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ <b>QIWI</b>, '
                         '–ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏ <b>–û—Ç–º–µ–Ω–∞</b>, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –ø—Ä–æ–ø–∞–¥—É—Ç')
    await message.answer('<b>–ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—à—å –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –¥–æ–Ω–∞—Ç–æ–º —Å—Å—ã–ª–∫—É '
                         '–Ω–∞ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ —Å–º–æ–≥ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å '
                         '—Ç–µ–±—èüòâ</b>', reply_markup=markup)


@dp.callback_query_handler(text_contains='donate_')
async def donation(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_name = str(call.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await call.answer(cache_time=10)

    callback_data = str(call.data).replace('donate_', '')

    if callback_data == 'Sberbank':
        await call.message.answer(f'–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–°–±–µ—Ä–±–∞–Ω–∫): <b>{config.CARD_NUMBER} -- <i>{config.MY_NAME}</i></b>')

    await call.message.edit_reply_markup(reply_markup=None)


@dp.message_handler(commands='check_params')
@dp.throttled(rate=3)
async def check_params(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    user_params = db.get_all_user_info(user_id)
    await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n{user_params}\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-–ª–∏–±–æ, '
                         f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏!üòÉ')


@dp.message_handler()
async def message_control(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    user_name = str(message.from_user.full_name)
    db.add_new_user(user_id, user_name)

    await message.answer(template_messages.not_correct_message)


def get_user_params(user):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_params = {'id': user[0],
                   'name': user[1],
                   'send_time': user[2],
                   'city': user[3],
                   'news_topic': user[4],
                   'quantity_news': user[5],
                   'status': user[6]
                   }
    return user_params


async def user_regular_sending(user_params):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–≥–æ–¥—É"""
    # –†–∞–±–æ—Ç–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    # –ë–ª–æ–∫ try –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ª–æ–º–∞–ª—Å—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π
    # –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞
    try:
        for news_number in range(0, user_params['quantity_news']):
            news_message = get_news(user_params['news_topic'], user_params['quantity_news'], news_number)
            await bot.send_message(user_params['id'], news_message)

            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ "/set_news_topic" –≤ news_message - –∑–Ω–∞—á–∏—Ç, –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ–ª—å—à–µ
            # –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ -> –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞
            if '/set_news_topic' in news_message:
                break

        # –†–∞–±–æ—Ç–∞ —Å –ø–æ–≥–æ–¥–æ–π
        weather_message = get_weather(user_params['city'])
        await bot.send_message(user_params['id'], weather_message)

    except:
        pass


@scheduler.scheduled_job('cron', id='users_sending_control', second='0')
async def users_sending_control():
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    all_users = db.get_all_users_info()

    for user in all_users:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        user_params = get_user_params(user)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_params['status'] == 0:
            cron_obj = scheduler.get_job(job_id=str(user_params['id']))
            if cron_obj is not None:
                scheduler.remove_job(job_id=str(user_params['id']))

        # –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
        else:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç cron
            cron_obj = scheduler.get_job(job_id=str(user_params['id']))

            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –∫—Ä–æ–Ω–∞
            from_db_time = user_params['send_time'].split(':')
            from_db_hours = int(from_db_time[0])
            from_db_minutes = int(from_db_time[1])

            if cron_obj is None:
                # –ë–ª–æ–∫ try –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ª–æ–º–∞–ª—Å—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π
                # –∑–∞–±–∞–Ω–∏–ª –±–æ—Ç–∞
                scheduler.add_job(user_regular_sending,
                                  CronTrigger.from_crontab(f'{from_db_minutes} {from_db_hours} * * *'),
                                  args=(user_params,), id=str(user_params['id']))

            else:
                schedule_time = cron_obj.next_run_time.strftime('%H:%M')
                schedule_time = str(schedule_time).split(':')
                schedule_hours = int(schedule_time[0])
                schedule_minutes = int(schedule_time[1])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if schedule_hours != from_db_hours or schedule_minutes != from_db_minutes:
                    scheduler.remove_job(str(user_params['id']))
                    scheduler.add_job(user_regular_sending,
                                      CronTrigger.from_crontab(f'{from_db_minutes} {from_db_hours} * * *'),
                                      args=(user_params,), id=str(user_params['id']))


loop = asyncio.get_event_loop()

if __name__ == '__main__':
    executor.start_polling(dp, loop=loop)
